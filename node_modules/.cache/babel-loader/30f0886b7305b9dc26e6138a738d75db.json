{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\DeLL\\\\Desktop\\\\react-search-github-users\\\\src\\\\context\\\\context.js\";\nimport React, { useState, useEffect } from 'react';\nimport mockUser from './mockData.js/mockUser';\nimport mockRepos from './mockData.js/mockRepos';\nimport mockFollowers from './mockData.js/mockFollowers';\nimport axios from 'axios';\nconst rootUrl = 'https://api.github.com';\nconst GithubContext = React.createContext(); // Provider, Consumer - GithubContext.Provider\n\nconst GithubProvider = ({\n  children\n}) => {\n  const [githubUser, setGithubUser] = useState(mockUser);\n  const [repos, setRepos] = useState(mockRepos);\n  const [followers, setFollowers] = useState(mockFollowers); // request loading\n\n  const [requests, setRequests] = useState(0);\n  const [isLoading, setIsLoading] = useState(false); // error\n\n  const [error, setError] = useState({\n    show: false,\n    msg: ''\n  });\n\n  const searchGithubUser = async user => {\n    toggleError();\n    setIsLoading(true);\n    const response = await axios(`${rootUrl}/users/${user}`).catch(err => console.log(err));\n\n    if (response) {\n      setGithubUser(response.data);\n      const {\n        login,\n        followers_url\n      } = response.data;\n      await Promise.allSettled([axios(`${rootUrl}/users/${login}/repos?per_page=100`), axios(`${followers_url}?per_page=100`)]).then(results => {\n        const [repos, followers] = results;\n        const status = 'fulfilled';\n\n        if (repos.status === status) {\n          setRepos(repos.value.data);\n        }\n\n        if (followers.status === status) {\n          setFollowers(followers.value.data);\n        }\n      }).catch(err => console.log(err));\n    } else {\n      toggleError(true, 'there is no user with that username');\n    }\n\n    checkRequests();\n    setIsLoading(false);\n  }; //  check rate\n\n\n  const checkRequests = () => {\n    axios(`${rootUrl}/rate_limit`).then(({\n      data\n    }) => {\n      let {\n        rate: {\n          remaining\n        }\n      } = data;\n      setRequests(remaining);\n\n      if (remaining === 0) {\n        toggleError(true, 'sorry, you have exceeded your hourly rate limit!');\n      }\n    }).catch(err => console.log(err));\n  };\n\n  function toggleError(show = false, msg = '') {\n    setError({\n      show,\n      msg\n    });\n  } // error\n\n\n  useEffect(checkRequests, []); // get initial user\n\n  useEffect(() => {\n    searchGithubUser('john-smilga');\n  }, []);\n  return /*#__PURE__*/React.createElement(GithubContext.Provider, {\n    value: {\n      githubUser,\n      repos,\n      followers,\n      requests,\n      error,\n      searchGithubUser,\n      isLoading\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 5\n    }\n  }, children);\n};\n\nexport { GithubProvider, GithubContext };","map":{"version":3,"sources":["C:/Users/DeLL/Desktop/react-search-github-users/src/context/context.js"],"names":["React","useState","useEffect","mockUser","mockRepos","mockFollowers","axios","rootUrl","GithubContext","createContext","GithubProvider","children","githubUser","setGithubUser","repos","setRepos","followers","setFollowers","requests","setRequests","isLoading","setIsLoading","error","setError","show","msg","searchGithubUser","user","toggleError","response","catch","err","console","log","data","login","followers_url","Promise","allSettled","then","results","status","value","checkRequests","rate","remaining"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport mockUser from './mockData.js/mockUser';\r\nimport mockRepos from './mockData.js/mockRepos';\r\nimport mockFollowers from './mockData.js/mockFollowers';\r\nimport axios from 'axios';\r\n\r\nconst rootUrl = 'https://api.github.com';\r\n\r\nconst GithubContext = React.createContext();\r\n\r\n// Provider, Consumer - GithubContext.Provider\r\n\r\nconst GithubProvider = ({ children }) => {\r\n  const [githubUser, setGithubUser] = useState(mockUser);\r\n  const [repos, setRepos] = useState(mockRepos);\r\n  const [followers, setFollowers] = useState(mockFollowers);\r\n  // request loading\r\n  const [requests, setRequests] = useState(0);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  // error\r\n  const [error, setError] = useState({ show: false, msg: '' });\r\n\r\n  const searchGithubUser = async (user) => {\r\n    toggleError();\r\n    setIsLoading(true);\r\n    const response = await axios(`${rootUrl}/users/${user}`).catch((err) =>\r\n      console.log(err)\r\n    );\r\n    if (response) {\r\n      setGithubUser(response.data);\r\n      const { login, followers_url } = response.data;\r\n\r\n      await Promise.allSettled([\r\n        axios(`${rootUrl}/users/${login}/repos?per_page=100`),\r\n        axios(`${followers_url}?per_page=100`),\r\n      ])\r\n        .then((results) => {\r\n          const [repos, followers] = results;\r\n          const status = 'fulfilled';\r\n          if (repos.status === status) {\r\n            setRepos(repos.value.data);\r\n          }\r\n          if (followers.status === status) {\r\n            setFollowers(followers.value.data);\r\n          }\r\n        })\r\n        .catch((err) => console.log(err));\r\n    } else {\r\n      toggleError(true, 'there is no user with that username');\r\n    }\r\n    checkRequests();\r\n    setIsLoading(false);\r\n  };\r\n\r\n  //  check rate\r\n  const checkRequests = () => {\r\n    axios(`${rootUrl}/rate_limit`)\r\n      .then(({ data }) => {\r\n        let {\r\n          rate: { remaining },\r\n        } = data;\r\n        setRequests(remaining);\r\n        if (remaining === 0) {\r\n          toggleError(true, 'sorry, you have exceeded your hourly rate limit!');\r\n        }\r\n      })\r\n      .catch((err) => console.log(err));\r\n  };\r\n  function toggleError(show = false, msg = '') {\r\n    setError({ show, msg });\r\n  }\r\n  // error\r\n  useEffect(checkRequests, []);\r\n  // get initial user\r\n  useEffect(() => {\r\n    searchGithubUser('john-smilga');\r\n  }, []);\r\n  return (\r\n    <GithubContext.Provider\r\n      value={{\r\n        githubUser,\r\n        repos,\r\n        followers,\r\n        requests,\r\n        error,\r\n        searchGithubUser,\r\n        isLoading,\r\n      }}\r\n    >\r\n      {children}\r\n    </GithubContext.Provider>\r\n  );\r\n};\r\n\r\nexport { GithubProvider, GithubContext };\r\n"]},"metadata":{},"sourceType":"module"}